/********************************************
///    Name:        Amirhossein Sabagh    ///
///    Student#:    152956199             ///
///    Email:       asabagh@myseneca.ca   ///
///    Date:        2021-01-19            ///
|*******************************************|
|********  Workshop 1 - Reflection  ********|
|*******************************************|

Translation unit (or compilation unit) is a file that includes the implementation source code as well as expanded macros (ex. the #include header files) or source codes that are conditionally defined depending on an #ifndef. This translation unit is then fed to the compiler. Understanding that what the translation unit is makes comprehending the meaning of internal or external linkage easier. When processing files in the linker, the way our variables and functions are visible to the linker defines what type of linkage we are dealing with. Internal linkage covers everything in the scope of a translation unit. External linkage, however, contains things that do no exist within only a particular translation unit but are accessible through the whole program. I received assistance from external linkage when declaring the integer g_sysClock, by using the extern keyword. This way, this integer was visible to the whole program; therefore, I was able to work with it both in my main file and in the Event module, something that couldn't be possible without external linkage. Also, I declared a C string and set it to nullptr so I can use it for the default argument of the set function; this resolved the problem that occurred if the set function was called with no argument (line 95 w1_p1.cpp). I declared this character array to be external as well, so even though it was declared in the Event module, it could also be accessed in the main module. The variables that are declared as static are what we call internal linkage; even though they are inaccessible outside their translation unit and it refuses them to be an external linkage, they are visible to other scopes that exist in the file and that is what separates them from an ordinary variable. I declared the counter variable to be static so it would be visible to the whole Event module and could then keep track of the times that the display function gets called. 
One piece of my code that I made more efficient was that I declared a private function in the Event class, and its job is to set the current instance of the object to the empty state. There were more than two times in my code that I repeated some statements to do the deallocation of the memory and setting the variables to an empty state; a better solution was to declare a function, implement it as to do all those things, and just call it where necessary.